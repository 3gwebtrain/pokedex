import { Typography } from "@mui/material";
import { DataGrid, GridColDef } from "@mui/x-data-grid";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { useListOfPokemonsQuery } from "../api";
import { AppState } from "../store";

const index = (): React.ReactNode => {
  const { welcomeMsg } = useSelector((state: AppState) => state.slicePokemon.clientData);
  const [pokemons, setPokemons] = useState([]);

  const { isLoading, isError, isSuccess, data } = useListOfPokemonsQuery(undefined);

  useEffect((): void => {
    if (data && data.count) {
      setPokemons(data.results.map((pokemon: { name: string; url: string; id: number }, i: number) => ({ name: pokemon.name, url: pokemon.url, id: i + 1 })));
    }
  }, [data]);

  const columns: GridColDef[] = [
    { field: "id", headerName: "No.", width: 150 },
    { field: "name", headerName: "Name", width: 150 },
    { field: "url", headerName: "Url", width: 350 },
    {
      field: "link",
      headerName: "Navigation",
      width: 350,
      renderCell: (props): React.ReactNode => <Link href={`pokemon/${props.row.id}`}>{props.row.url}</Link>,
    },
  ];

  if (isLoading) {
    return <p>loading, please wait</p>;
  }

  if (isError) {
    return <p>something went wrong</p>;
  }

  if (isSuccess) {
    return (
      <>
        <Head>
          <title>Contact page</title>
          <meta
            name="description"
            content="Generated by create next app"
          />
          <meta
            name="viewport"
            content="width=device-width, initial-scale=1"
          />
        </Head>
        <article>
          <Typography
            variant="h1"
            component="h2"
          >
            {welcomeMsg && welcomeMsg}
          </Typography>
          {pokemons.length > 0 ? (
            <div style={{ height: "100%", width: "100%", background: "#fff" }}>
              <DataGrid
                pagination
                rows={pokemons}
                columns={columns}
                initialState={{
                  pagination: { paginationModel: { pageSize: 10 } },
                }}
                pageSizeOptions={[10, 20, 50, 100]}
              />
            </div>
          ) : null}
        </article>
      </>
    );
  }
};

export default index;
